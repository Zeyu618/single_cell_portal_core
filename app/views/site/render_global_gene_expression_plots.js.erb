var exp_target_<%= @identifier %> = '<%= @target %>' + '-plot'
$('#' + exp_target_<%= @identifier %>).empty();
$('#<%= @target %>-options').html("<%= escape_javascript(render partial: '/site/search/gene_result_view_options') %>");
var expressionData_<%= @identifier %> = [];
<% if @selected_annotation[:type] == 'group' %>

    // Using jitter_var instead of jitter because selector is called jitter, avoid confusion
    var jitter_var_<%= @identifier %> = "<%= @values_jitter %>";
    var formatted_array_<%= @identifier %> = [];
    <% @values.sort_by {|k,v| k}.each do |cluster, data| %>
    formatted_array_<%= @identifier %>.push(["<%= cluster %>", <%= raw data[:y] %>]);
    <% end %>
    var title_<%= @identifier %>= "<%= params[:cluster]%>";
    var data_<%= @identifier %> = createTracesAndLayout(formatted_array_<%= @identifier %>, title_<%= @identifier %>, jitter_var_<%= @identifier %>, '<%= @y_axis_title %>');
    expressionData_<%= @identifier %> = [].concat.apply([], data_<%= @identifier %>[0] );
    expressionLayout_<%= @identifier %> = data_<%= @identifier %>[1];

    Plotly.newPlot(exp_target_<%= @identifier %>, expressionData_<%= @identifier %>, expressionLayout_<%= @identifier %>);
<% else %>
    <% @values.each do |cluster, data| %>
      expressionData_<%= @identifier %>.push(
          {
              x: <%= raw data[:x] %>,
              y: <%= raw data[:y] %>,
              text: <%= raw data[:text] %>,
              name: "<%= data[:name] %>",
              mode: 'markers',
              type: 'scattergl',
              hoverinfo: 'text'
          }
      );
    <% end %>

    var expressionLayout_<%= @identifier %> = {
        hovermode: 'closest',
        font: plotlyLabelFont,
        xaxis:{
            title: '<%= @selected_annotation[:name] %>'
        },
        yaxis: {
            title: '<%= @y_axis_title %>'
        }
    }

    Plotly.newPlot(exp_target_<%= @identifier %>, expressionData_<%= @identifier %>, expressionLayout_<%= @identifier %>);
<% end %>

$('#' + exp_target_<%= @identifier %>).data('rendered', true);
